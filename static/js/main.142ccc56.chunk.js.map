{"version":3,"sources":["components/ErrorBoundry/ErrorBoundry.js","services/api/index.js","components/CountryPicker/CountryPicker.js","components/Charts/GlobalInfoChart/GlobalInfoChart.js","components/Charts/TimeSeriesChart/TimeSeriesChart.js","styled/Container.js","pages/HomePage.js","utils/index.js","pages/SummaryPage.js","AppRoutes.js","components/Navbar/Navbar.js","components/DataTable/TablePaginationActions.js","components/DataTable/DataTable.js","styled/Global.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","children","React","Component","getHistoricalData","days","a","axios","get","process","data","dates","Object","keys","console","log","getCountries","getSummary","CountryPicker","handleCountryChange","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","countries","Autocomplete","multiple","width","onOpen","onClose","onChange","getOptionSelected","option","value","Country","getOptionLabel","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","size","GlobalInfoChart","TotalConfirmed","TotalRecovered","labels","datasets","values","backgroundColor","hoverBackgroundColor","TimeSeriesChart","cases","deaths","recovered","map","date","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","responsive","title","display","text","fontSize","position","legend","scales","xAxes","stacked","ticks","maxRotation","maxTicksLimit","callback","i","Date","toLocaleDateString","day","month","year","split","join","source","Container","styled","div","HomeContainer","ChartWrapper","HomePage","globalInfo","setGlobalInfo","historicalData","setHistoricalData","getMaxHeight","arr","attr","reduce","prev","current","tableRows","columns","id","align","useStyles","makeStyles","green","fontWeight","red","yellow","createRowData","country","newConfirmed","totalConfirmed","newDeaths","newRecovered","totalRecovered","SummaryPage","Routes","path","sidebarName","component","rows","setRows","setCountry","classes","items","item","push","generateTableRows","acc","row","find","ISO2","rowsPerPage","chuncks","len","chunks","n","slice","chunck","JSON","parse","stringify","newRows","hRecoveredRow","hDeathsRow","hConfirmedRow","event","DataTable","rowsCountPerPage","onChangeRowsPage","theme","root","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","withRouter","window","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","toggleDrawer","type","key","className","Divider","fullList","role","onClick","onKeyDown","MenuList","prop","to","textDecoration","MenuItem","selected","routeName","location","pathname","ListItemText","primary","container","undefined","document","body","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","route","exact","TablePaginationActions","count","page","onChangePage","disabled","Math","ceil","max","maxHeight","setPage","setRowsPerPage","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","minWidth","TableBody","hover","tabIndex","cell","code","format","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","GlobalStyle","createGlobalStyle","App","setInterval","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.142ccc56.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { error: null, errorInfo: null };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Catch errors in any components below and re-render with error message\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        })\n        // You can also log error messages to an error reporting service here\n    }\n\n    render() {\n        if (this.state.errorInfo) {\n            // Error path\n            return (\n                <div>\n                    <h2>Something went wrong.</h2>\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        // Normally, just render children\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import axios from \"axios\";\n\nconst COVID_API = process.env.REACT_APP_COVID_API;\nconst DISEASE_API = process.env.REACT_APP_DISEASE_API;\n\nexport const getHistoricalData = async (days) => {\n  try {\n    const {\n      data\n    } = await axios.get(`${DISEASE_API}/covid-19/historical/all?lastdays=${days}`);\n    const dates = Object.keys(data['cases']);\n    data['dates'] = dates;\n\n    return data;\n\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getCountries = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`${COVID_API}/countries`);\n\n    return data;\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSummary = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`${COVID_API}/summary`);\n\n    return data;\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { getCountries } from \"services/api\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function CountryPicker({ handleCountryChange }) {\n\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const loading = open && options.length === 0;\n\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      const countries = await getCountries()\n\n      if (active) {\n        setOptions(countries);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      multiple\n      style={{ width: 300 }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      onChange={handleCountryChange}\n      getOptionSelected={(option, value) => option.Country === value.Country}\n      getOptionLabel={(option) => option.Country}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Countries\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n","\nimport React from 'react'\nimport { Pie as PieChart } from 'react-chartjs-2';\n\nfunction GlobalInfoChart({ data }) {\n\n    const { TotalConfirmed, TotalRecovered } = data;\n\n    return (\n        Object.keys(data).length &&\n        <PieChart\n            data={{\n                labels: [\n                    'Total Confirmed',\n                    'Total Recovered'\n                ],\n                datasets: [{\n                    data: Object.values([TotalConfirmed, TotalRecovered]),\n                    backgroundColor: [\n                        '#FF6384',\n                        '#4ac0c0'\n                    ],\n                    hoverBackgroundColor: [\n                        '#FF6384',\n                        '#4abdbe'\n                    ]\n                }]\n            }}\n        />\n    )\n}\n\nexport default GlobalInfoChart\n","import React from 'react'\nimport { Line } from 'react-chartjs-2';\n\n\nfunction TimeSeriesChart({ data }) {\n\n    const { cases, deaths, recovered, dates } = data;\n\n    return (\n        Object.keys(data).length &&\n        <Line data={{\n            labels: dates.map(date => date),\n            datasets: [\n                {\n                    label: 'Recovered',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: Object.values(recovered)\n                },\n                {\n                    label: 'Deaths',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(255, 99, 132,0.4)',\n                    borderColor: 'rgba(255, 99, 132,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(255, 99, 132,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(255, 99, 132,1)',\n                    pointHoverBorderColor: 'rgba(255, 99, 132,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: Object.values(deaths)\n                },\n                {\n                    label: 'Cases',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(54, 162, 235,0.4)',\n                    borderColor: 'rgba(54, 162, 235,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(54, 162, 235,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(54, 162, 235,1)',\n                    pointHoverBorderColor: 'rgba(54, 162, 235,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: Object.values(cases)\n                }\n            ]\n        }}\n            options={{\n                responsive: true,\n                title: {\n                    display: true,\n                    text: 'Last 90 days',\n                    fontSize: 20,\n                    position: 'top'\n\n                },\n                legend: {\n                    display: true,\n                    position: 'bottom'\n                },\n                scales: {\n                    xAxes: [{\n                        display: true,\n                        stacked: false,\n                        ticks: {\n                            maxRotation: 0,\n                            maxTicksLimit: 3,\n                            // labelOffset: 50\n                            callback: function (date, i) {\n                                return new Date(date).toLocaleDateString('en-GB', {\n                                    day : 'numeric',\n                                    month : 'short',\n                                    year : 'numeric'\n                                }).split(' ').join('-');\n                                    ;\n                            },\n                            source: 'data'\n                        }\n                    }]\n                }\n            }} />\n    )\n}\n\nexport default TimeSeriesChart;\n","import styled from 'styled-components';\n\nexport const Container = styled.div` width: 100%;\npadding-right: 15px;\npadding-left: 15px;\nmargin-right: auto;\nmargin-left: auto;`\n\nexport const HomeContainer = styled.div` display: grid;\nalign-items: center;\ngrid-template-columns: repeat(auto-fit, minmax(400px, 1fr));`\n\nexport const ChartWrapper = styled.div`\ngrid-template-columns: 1fr 1fr;\ngrid-template-rows: 1fr 1fr; `\n","import React, { useState, useEffect } from \"react\";\nimport { getSummary, getHistoricalData } from \"services/api\";\nimport { GlobalInfoChart, TimeSeriesChart } from 'components/Charts'\nimport { ChartWrapper, HomeContainer } from 'styled/Container';\n\nfunction HomePage() {\n    const [globalInfo, setGlobalInfo] = useState([]);\n    const [historicalData, setHistoricalData] = useState({});\n\n    useEffect(() => {\n        (async () => {\n            const data = await getHistoricalData(90);\n            setHistoricalData(data);\n        })()\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            const data = await getSummary();\n            setGlobalInfo(data['Global']);\n        })()\n    }, []);\n\n\n    return (\n        <HomeContainer>\n            <ChartWrapper>\n                <TimeSeriesChart data={historicalData} />\n            </ChartWrapper>\n            <ChartWrapper>\n                <GlobalInfoChart data={globalInfo} />\n            </ChartWrapper>\n        </HomeContainer>\n    )\n}\n\nexport default HomePage\n","export const chunck = (arr, len) => {\n    var chunks = [], i = 0, n = arr.length;\n    while (i < n) {\n        chunks.push(arr.slice(i, i += len));\n    }\n    return chunks;\n}\n\nexport const getMaxHeight = (arr, attr) => arr.reduce(function (prev, current) {\n    return (prev[attr].value > current[attr].value) ? prev : current\n});\n\n\nexport const diff = (from, to) => {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const arr = [];\n    const datFrom = new Date(from);\n    const datTo = new Date(to);\n    const fromYear = datFrom.getFullYear();\n    const toYear = datTo.getFullYear();\n    const diffYear = (12 * (toYear - fromYear)) + datTo.getMonth();\n\n    for (var i = datFrom.getMonth(); i <= diffYear; i++) {\n        arr.push(monthNames[i % 12] + \" \" + Math.floor(fromYear + (i / 12)));\n    }\n\n    return arr;\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core';\nimport { DataTable, ErrorBoundary, CountryPicker } from 'components';\nimport { getSummary } from 'services/api'\nimport { chunck, getMaxHeight } from 'utils';\n\nlet tableRows = [];\nconst rowsCountPerPage = 10;\nconst columns = [\n    {\n        id: 'country',\n        label: 'Country Name',\n    },\n    {\n        id: 'newConfirmed',\n        label: 'New Confirmed',\n        align: 'left'\n    },\n    {\n        id: 'totalConfirmed',\n        label: 'Total Confirmed',\n        align: 'left'\n    },\n    {\n        id: 'newDeaths',\n        label: 'New Deaths',\n        align: 'left'\n    },\n    {\n        id: 'newRecovered',\n        label: 'New Recovered',\n        align: 'left'\n    },\n    {\n        id: 'totalRecovered',\n        label: 'Total Recovered',\n        align: 'left'\n    }\n];\nconst useStyles = makeStyles({\n    green: {\n        backgroundColor: 'green',\n        color: '#fff',\n        fontWeight: 'bold'\n    },\n    red: {\n        backgroundColor: 'red',\n        color: '#fff',\n        fontWeight: 'bold'\n    },\n    yellow: {\n        backgroundColor: 'yellow',\n        color: '#000',\n        fontWeight: 'bold'\n    },\n});\n\nconst createRowData = (data) => {\n    return {\n        id: data['CountryCode'],\n        country: { value: data['Country'], style: data['style'] },\n        newConfirmed: { value: data['NewConfirmed'], style: data['style'] },\n        totalConfirmed: { value: data['TotalConfirmed'], style: data['style'] },\n        newDeaths: { value: data['NewDeaths'], style: data['style'] },\n        newRecovered: { value: data['NewRecovered'], style: data['style'] },\n        totalRecovered: { value: data['TotalRecovered'], style: data['style'] }\n    }\n}\n\nfunction SummaryPage() {\n    const [rows, setRows] = useState([]);\n    const [countries, setCountry] = useState([]);\n    const classes = useStyles();\n\n    useEffect(() => {\n        (async () => {\n            const data = await getSummary();\n            tableRows = data['Countries'].reduce(\n                (items, item) => {\n                    items.push(createRowData(item))\n                    return items;\n                }, [])\n            generateTableRows(tableRows, rowsCountPerPage);\n        })()\n    }, []);\n\n\n    useEffect(() => {\n        if (countries.length) {\n            const rows = tableRows.reduce((acc, row) => {\n                const item = countries.find(country => row.id === country.ISO2);\n                if (item) {\n                    acc.push(row);\n                }\n                return acc;\n            }, []);\n\n            return generateTableRows(rows, rowsCountPerPage);\n        }\n\n        return generateTableRows(tableRows, rowsCountPerPage);\n\n    }, [countries]);\n\n\n    const generateTableRows = (rows, rowsPerPage) => {\n        const rowsCopy = JSON.parse(JSON.stringify(rows));\n        const chuncks = chunck(rowsCopy, rowsPerPage);\n        const newRows = [];\n\n        chuncks.map((chunck) => {\n            const hRecoveredRow = getMaxHeight(chunck, 'totalRecovered');\n            const hDeathsRow = getMaxHeight(chunck, 'newDeaths');\n            const hConfirmedRow = getMaxHeight(chunck, 'newConfirmed');\n\n            hRecoveredRow.totalRecovered.style = classes.green;\n            hDeathsRow.newDeaths.style = classes.red;\n            hConfirmedRow.newConfirmed.style = classes.yellow;\n            newRows.push(...chunck)\n\n            return newRows;\n        });\n\n        setRows(newRows)\n    }\n\n    const handleCountryChange = (event, countries) => {\n        setCountry(countries);\n    };\n\n    const handelChangeRowsPage = (rowsPerPage) => {\n        if (rowsPerPage !== -1) {\n            rowsPerPage = rowsPerPage ? rowsPerPage : rowsCountPerPage;\n        } else {\n            rowsPerPage = tableRows.length;\n        }\n\n        generateTableRows(tableRows, rowsPerPage);\n    };\n\n\n    return (\n        <div>\n            <ErrorBoundary>\n                <CountryPicker handleCountryChange={handleCountryChange} />\n                <DataTable\n                    columns={columns}\n                    rows={rows}\n                    rowsCountPerPage={rowsCountPerPage}\n                    onChangeRowsPage={handelChangeRowsPage} />\n            </ErrorBoundary>\n        </div>\n    )\n}\n\nexport default SummaryPage\n","import HomePage from 'pages/HomePage';\nimport SummaryPage from 'pages/SummaryPage';\n\nconst Routes = [\n    {\n        path: '/',\n        sidebarName: 'Home',\n        component: HomePage\n    },\n    {\n        path: '/summary',\n        sidebarName: 'Summary',\n        component: SummaryPage\n    }\n];\n\nexport default Routes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { NavLink, withRouter, Switch, Route } from 'react-router-dom';\nimport { MenuList, MenuItem } from '@material-ui/core';\nimport Routes from 'AppRoutes';\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        [theme.breakpoints.up('sm')]: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\n\nconst Navbar = (props) => {\n    const { window } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n    const toggleDrawer = (open) => (\n        event,\n    ) => {\n        if (\n            event.type === 'keydown' &&\n            ((event).key === 'Tab' ||\n                (event).key === 'Shift')\n        ) {\n            return;\n        }\n\n        setMobileOpen(open);\n    };\n\n    const activeRoute = (routeName) => {\n        return props.location.pathname === routeName ? true : false;\n    }\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <div\n                className={classes.fullList}\n                role=\"presentation\"\n                onClick={toggleDrawer(false)}\n                onKeyDown={toggleDrawer(false)}\n            >\n                <MenuList>\n                    {Routes.map((prop, key) => {\n                        return (\n                            <NavLink to={prop.path} style={{ textDecoration: 'none' }} key={key}>\n                                <MenuItem selected={activeRoute(prop.path)}>\n                                    <ListItemText primary={prop.sidebarName} />\n                                </MenuItem>\n                            </NavLink>\n                        );\n                    })}\n                </MenuList>\n            </div>\n        </div>\n    );\n\n    const container = window !== undefined ? () => window().document.body : undefined;\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        COVID-19\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <Switch>\n                    {Routes.map((route) => (\n                        <Route exact path={route.path} key={route.path}>\n                            <route.component />\n                        </Route>\n                    ))}\n                </Switch>\n            </main>\n        </div >\n    );\n};\n\nNavbar.propTypes = {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n};\n\nexport default withRouter(Navbar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginRight: theme.spacing(2.5),\n    },\n}));\n\nexport default function TablePaginationActions(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nTablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePaginationActions from './TablePaginationActions';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: '100%',\n    },\n});\n\n\nexport default function DataTable({ columns, rows, rowsCountPerPage, onChangeRowsPage }) {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(rowsCountPerPage ? rowsCountPerPage : 10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        const count = parseInt(event.target.value, 10)\n        setRowsPerPage(count);\n        setPage(0);\n        onChangeRowsPage(count);\n    };\n\n    useEffect(() => { setPage(0); }, [rows.length]);\n\n    // useEffect(() => {\n    //     const currentRows = rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n    //     if (currentRows && currentRows.length) {\n    //         handelCurrentRows(currentRows, rows);\n    //     }\n    // },[rows.length, rowsPerPage, page]);\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                                    {columns.map((column) => {\n                                        const cell = row[column.id];\n                                        return (\n                                            <TableCell className={cell.style ? cell.style : ''} key={column.id + row.code} align={column.align}>\n                                                {column.format && typeof cell.value === 'number' ? column.format(cell.value) : cell.value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25, 30, { label: 'All', value: -1 }]}\n                                colSpan={6}\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={(page > 0 && rows.length <= rowsPerPage) ? 0 : page}\n                                SelectProps={{\n                                    inputProps: { 'aria-label': 'rows per page' },\n                                    native: true,\n                                }}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                                ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n        </Paper>\n    );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`body {\n    margin: 0;\n    font-family: sans-serif;\n    color: #333;\n    background: #eee;\n}`\n","import React from 'react';\nimport { Navbar } from \"components\";\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Container } from \"./styled/Container\";\n\nimport \"./App.css\";\nimport { GlobalStyle } from 'styled/Global';\n\nfunction App() {\n  return (\n    <Container>\n      <BrowserRouter >\n        <GlobalStyle />\n        <Navbar />\n      </BrowserRouter>\n    </Container>\n  );\n}\n\nexport default App;\n\n\nsetInterval(() => {\n  \n}, 3000);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}